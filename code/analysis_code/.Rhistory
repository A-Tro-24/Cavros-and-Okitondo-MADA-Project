library(haven)
nhis_00010 <- read_sav("~/Documents/UGA Classes/Spring 2023/MADA/MADA Github Repo/Okitondo-Cavros-MADA-project/data/raw_data/nhis_00010.sav")
View(nhis_00010)
library(readxl) #for loading Excel files
library(haven) # for loading SPSS file
library(dplyr) #for data processing/cleaning
library(tidyr) #for data processing/cleaning
library(skimr) #for nice visualization of data
library(here) #to set paths
data_location <- here::here("data","raw_data","nhis_00010.sav")
rawdata <- haven::read_sav(data_location)
dplyr::glimpse(rawdata)
summary(rawdata)
head(rawdata)
skimr::skim(rawdata)
#Path to data.
data_location <- here::here("data","processed_data","processeddata.rds")
#load data
mydata <- readRDS(data_location)
View(mydata)
mydata <- na.omit(mydata)
# To maintain reproducible results when re-done.
set.seed(1234)
# Proceeding with 75% for training and 25% for test data
split <- initial_split(mydata, prop = 3/4)
library(here)
library(tidyverse)
library(tidymodels)
library(performance)
library(dplyr)
library(skimr)
# To maintain reproducible results when re-done.
set.seed(1234)
# Proceeding with 75% for training and 25% for test data
split <- initial_split(mydata, prop = 3/4)
train_data <- training(split)
test_data  <- testing(split)
# Outcome is flu_vaccine. The rest of variables are our predictors of interest
# Recipe #1: flu_vaccine predicted by all predictors of interest
flu_rec <- recipe(flu_vaccine ~ age + sex + race + hispanic + education + fam_income + asthma + cancer + chd + smoking_status+ alcohol_status, data = train_data)
# Model: logistic regression using GLM engine
flu_mod <- logistic_reg() %>%
set_engine("glm")
# Workflow: Pairing model and recipe
flu_workflow <- workflow() %>%
add_model(flu_mod) %>%
add_recipe(flu_rec)
# Pring workflow
flu_workflow
# Fitting the model to a training dataset
flu_fit <-
flu_workflow %>%
fit(data = train_data)
# Looking at the model output
flu_fit %>%
extract_fit_parsnip() %>%
tidy()
# Using the trained workflow (flu_fit) to predict with the unseen test data
predict(flu_fit, test_data)
# Using argument() with the model plus test data for saving them together
flu_aug <-
augment(flu_fit, test_data)
flu_aug %>%
select(flu_vaccine, .pred_No, .pred_Yes)
# Outcome is flu_vaccine. The rest of variables are our predictors of interest
# Recipe #1: flu_vaccine predicted by all predictors of interest
flu_rec <- recipe(flu_vaccine ~ age + sex + race + hispanic + education + fam_income + asthma + cancer + chd + smoking_status+ alcohol_status, data = train_data)
# Model: logistic regression using GLM engine
flu_mod <- logistic_reg() %>%
set_engine("glm")
# Workflow: Pairing model and recipe
flu_workflow <- workflow() %>%
add_model(flu_mod) %>%
add_recipe(flu_rec)
# Pring workflow
flu_workflow
# Fitting the model to a training dataset
flu_fit <-
flu_workflow %>%
fit(data = train_data)
# Looking at the model output
flu_fit %>%
extract_fit_parsnip() %>%
tidy()
predict(flu_fit, test_data)
flu_aug <-
augment(flu_fit, test_data)
flu_aug %>%
select(flu_vaccine, .pred_No, .pred_Yes)
View(flu_aug)
# Using the trained workflow (flu_fit) to predict with the unseen test data
predict(flu_fit, test_data)
# Using argument() with the model plus test data for saving them together
flu_aug <-
augment(flu_fit, test_data)
flu_aug %>%
select(flu_vaccine, .pred_no, .pred_yes)
# Plotting ROC curve
flu_aug %>%
roc_curve(truth = flu_vaccine, .pred_no) %>%
autoplot()
# Using roc_auc() to get the estimates
flu_aug %>%
roc_auc(truth = flu_vaccine, .pred_no)
# Using flu_vaccine as a categorical outcome of interest and race as main predictor
flu_rec2 <- recipe(flu_vaccine ~ race, data = train_data)
# Fitting the logistic model
flu_mod2 <- logistic_reg() %>%
set_engine("glm")
# Modelling workflow for pairing model and recipe
flu_workflow2 <- workflow() %>%
add_model(flu_mod2) %>%
add_recipe(flu_rec2)
flu_workflow2
# Using the resulting predictors for preparing recipe and training the model
flu_fit2 <-
flu_workflow2 %>%
fit(data = train_data)
# Pulling the fitted model object and using tidy() function for getting a tidy tibble of model coefficients
flu_fit2 %>%
extract_fit_parsnip() %>%
tidy()
# Using the trained data to predict with the unseen test data
predict(flu_fit2, test_data)
# Using argument() with the model plus test data for saving them together
flu_aug2 <-
augment(flu_fit2, test_data)
flu_aug2 %>%
select(flu_vaccine, .pred_no, .pred_yes)
# Creating ROC curve and piping to the autoplot() method
flu_aug2 %>%
roc_curve(truth = flu_vaccine, .pred_no) %>%
autoplot()
# Estimating the area under the curve
flu_aug2 %>%
roc_auc(truth = flu_vaccine, .pred_no)
# Using the trained workflow (flu_fit) to predict with the unseen test data
predict(flu_fit, test_data)
# Using argument() with the model plus test data for saving them together
flu_aug <-
augment(flu_fit, test_data)
flu_aug %>%
select(flu_vaccine, .pred_no, .pred_yes)
# Plotting ROC curve
flu_aug %>%
roc_curve(truth = flu_vaccine, .pred_no) %>%
autoplot()
# Using roc_auc() to get the estimates
flu_aug %>%
roc_auc(truth = flu_vaccine, .pred_no)
#Path to data.
data_location <- here::here("data","processed_data","processeddata.rds")
#load data
mydata <- readRDS(data_location)
mydata <- na.omit(mydata)
set.seed(123)
# Put 70/30 of the data into the training set
data_split <- initial_split(mydata, prop = 7/10)
# Create data frames for the two sets:
train_data <- training(data_split)
test_data  <- testing(data_split)
# Datasets for the training and test:
train_data <- training(data_split)
test_data  <- testing(data_split)
#5-fold cross-validation, 5 times repeated
fold_ds<- vfold_cv(train_data, v = 5, repeats = 5, strata = BodyTemp)
library(here)
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(ranger)
library(rpart)
library(glmnet)
library(vip)
library(rpart.plot)
library(performance)
library(yardstick)
library(recipes)
# Put 70/30 of the data into the training set
data_split <- initial_split(mydata, prop = 7/10)
# Create data frames for the two sets:
train_data <- training(data_split)
test_data  <- testing(data_split)
# Datasets for the training and test:
train_data <- training(data_split)
test_data  <- testing(data_split)
#5-fold cross-validation, 5 times repeated
fold_ds<- vfold_cv(train_data, v = 5, repeats = 5, strata = BodyTemp)
figure_file = here("results","AUC_full_model.png")
ggsave(filename = figure_file, plot=flu_aug)
flu_aug %>%
roc_curve(truth = flu_vaccine, .pred_no) %>%
autoplot()
figure_file = here("results","AUC_full_model.png")
ggsave(filename = figure_file, plot=flu_aug_full_model)
flu_aug_full_model <- flu_aug %>%
roc_curve(truth = flu_vaccine, .pred_no) %>%
autoplot()
flu_aug_full_model
figure_file = here("results","AUC_full_model.png")
ggsave(filename = figure_file, plot=flu_aug_full_model)
# Using flu_vaccine as a categorical outcome of interest and race as main predictor
flu_rec2 <- recipe(flu_vaccine ~ race, data = train_data)
# Fitting the logistic model
flu_mod2 <- logistic_reg() %>%
set_engine("glm")
# Modelling workflow for pairing model and recipe
flu_workflow2 <- workflow() %>%
add_model(flu_mod2) %>%
add_recipe(flu_rec2)
flu_workflow2
# Using the resulting predictors for preparing recipe and training the model
flu_fit2 <-
flu_workflow2 %>%
fit(data = train_data)
# Pulling the fitted model object and using tidy() function for getting a tidy tibble of model coefficients
flu_fit2 %>%
extract_fit_parsnip() %>%
tidy()
# Using the trained data to predict with the unseen test data
predict(flu_fit2, test_data)
# Using argument() with the model plus test data for saving them together
flu_aug2 <-
augment(flu_fit2, test_data)
flu_aug2 %>%
select(flu_vaccine, .pred_no, .pred_yes)
# Creating ROC curve and piping to the autoplot() method
flu_aug2 %>%
roc_curve(truth = flu_vaccine, .pred_no) %>%
autoplot()
# Estimating the area under the curve
flu_aug2 %>%
roc_auc(truth = flu_vaccine, .pred_no)
flu_aug_reduced_model <- flu_aug2 %>%
roc_curve(truth = flu_vaccine, .pred_no) %>%
autoplot()
flu_aug_reduced_model
figure_file = here("results","AUC_reduced_model.png")
ggsave(filename = figure_file, plot=flu_aug_reduced_model)
# load a few R packages
library(here)
library(knitr)
library(png)
roc_full <- readPNG("AUC_full_model.png")
# load a few R packages
library(here)
library(knitr)
library(png)
roc_full <- readPNG("AUC_full_model.png")
roc_full <- readPNG(here("results", "AUC_full_model.png"))
knitr::include_graphics("AUC_full_model.png")
knitr::include_graphics(here("results", "AUC_full_model.png"))
knitr::include_graphics(here("results", "age & flu uptake distribution.png"))
knitr::include_graphics(here("results", "age & flu uptake distribution.png"))
knitr::include_graphics(here("results", "AUC_full_model.png"))
knitr::include_graphics(here("results", "AUC_reduced_model.png"))
knitr::include_graphics(here("results", "age & flu uptake distribution.png"))
knitr::include_graphics(here("results", "age & flu uptake distribution.png"))
